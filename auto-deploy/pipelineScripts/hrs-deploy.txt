def getRelease
def getEnvironment

pipeline {
   agent any
   environment {
        HRS_WORKSPACE = "${JENKINS_HOME}/workspace/hrs"
    }

   stages {
      stage('Update HRS repositories') {
         steps {
            build('hrs-git-repos-util')
         }
      }
      stage('Select release') {
          steps {
            dir(path: "${HRS_WORKSPACE}/shamu-hrs-company-service") {
                // get all releases from git tag
                script { RELEASES = sh(returnStdout: true, script: 'git tag') }

                // select release you want to deploy
                timeout(60) {  // timeout waiting for input after 60 minutes
                    script {
                        getRelease = input id: 'release', message: 'Please select your release.', ok: 'Proceed?', parameters: [choice(choices: "${RELEASES}"+"master", description: 'Select a release to deploy.', name: 'RELEASE')], submitter: 'jenkins', submitterParameter: 'jenkins'
                    }
                }
            }
          }
      }
      stage('Select environment') {
          steps {
            dir(path: "${HRS_WORKSPACE}/shamu-hrs/auto-deploy/ansible/include") {
                 // get all environments: shamu-hrs-eastbay-prod.yml -> shamu-hrs-eastbay-prod
                script { ENVIRONMENTS = sh(returnStdout: true, script: '''ls | sed 's/\\.[^.]*$//' ''') }

                // select environment you want to deploy
                timeout(60) {  // timeout waiting for input after 60 minutes
                    script {
                        getEnvironment = input id: 'environment', message: 'Please select your environment.', ok: 'Proceed?', parameters: [choice(choices: ENVIRONMENTS, description: 'Select a environment to deploy.', name: 'ENVIRONMENT')], submitter: 'jenkins', submitterParameter: 'jenkins'
                    }
                }
            }
          }
      }
     stage('Create environment related config files') {
          steps {
              dir(path: "${HRS_WORKSPACE}") {
                  script { env = sh(returnStdout: true, script: "echo ${getEnvironment['ENVIRONMENT']} | sed 's/^.*-//'") }
                  script { stack_prefix = sh(returnStdout: true, script: """ echo ${getEnvironment['ENVIRONMENT']} | sed 's/-[^-]*\$//' """)}
                  sh '''
                      touch password
                      echo $PASSWORD > password
                    '''
                  sh "sudo ansible-playbook --vault-password-file password -e 'stack_prefix=${stack_prefix} env=${env} workspace=${HRS_WORKSPACE} user=$USER jenkins_home=$JENKINS_HOME' shamu-hrs/auto-deploy/ansible/build-shamu-hrs.yml --tags config-builder"
            }
          }
      }
      stage('Build and deploy HRS') {
          steps {
              script {
                  if (getRelease['RELEASE'] == "master") {
                      getRelease['RELEASE']="remotes/origin/master"
                  }
              }
              build job: 'hrs-build-and-deploy-util',
              parameters: [
                    string(name: 'HRS_WORKSPACE', value: String.valueOf("$HRS_WORKSPACE")),
                    string(name: 'RELEASE', value: String.valueOf("${getRelease['RELEASE']}")),
                    string(name: 'ENV', value: String.valueOf("${getEnvironment['ENVIRONMENT']}")),
                ]
          }
      }
   }
}