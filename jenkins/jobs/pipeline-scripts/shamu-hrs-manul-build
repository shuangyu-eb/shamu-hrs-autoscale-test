def getRelease
def getEnvironment

pipeline {
    agent any
    environment {
        HRS_WORKSPACE = "/home/ubuntu/workspace/shamu-hrs-manul-build"
        ROOT_DIR = "/home/ubuntu"
    }
    stages {
        stage('Update all repos') {
            parallel {
                stage('Update company service repo') {
                    steps {
                        sh 'mkdir -p shamu-hrs-company-service'
                        dir('shamu-hrs-company-service') {
                            git branch: "master",
                            credentialsId: "${credentialsId}",
                            url: 'https://github.com/tardisone/shamu-hrs-company-service.git'
                        }
                    }
                }
                stage('Update document service repo') {
                    steps {
                        sh 'mkdir -p shamu-hrs-document-service'
                        dir('shamu-hrs-document-service') {
                            git branch: "master",
                            credentialsId: "${credentialsId}",
                            url: 'https://github.com/tardisone/shamu-hrs-document-service.git'
                        }
                    }
                }
                stage('Update search service repo') {
                    steps {
                        sh 'mkdir -p shamu-hrs-search-service'
                        dir('shamu-hrs-search-service') {
                            git branch: "master",
                            credentialsId: "${credentialsId}",
                            url: 'https://github.com/tardisone/shamu-hrs-search-service.git'
                        }
                    }
                }
                stage('Update logging service') {
                    steps {
                        sh 'mkdir -p shamu-hrs-logging-service'
                        dir('shamu-hrs-logging-service') {
                            git branch: "master",
                            credentialsId: "${credentialsId}",
                            url: 'https://github.com/tardisone/shamu-hrs-logging-service.git'
                        }
                    }
                }
                stage('Update gateway repo') {
                    steps {
                        sh 'mkdir -p shamu-hrs-gateway'
                        dir('shamu-hrs-gateway') {
                            git branch: "master",
                            credentialsId: "${credentialsId}",
                            url: 'https://github.com/tardisone/shamu-hrs-gateway.git'
                        }
                    }
                }
                stage('Update web repo') {
                    steps {
                        sh 'mkdir -p shamu-hrs-web'
                        dir('shamu-hrs-web') {
                            git branch: "master",
                            credentialsId: "${credentialsId}",
                            url: 'https://github.com/tardisone/shamu-hrs-web.git'
                        }
                    }
                }
            }
        }
        stage('Select release') {
            steps {
                dir('company') {
                    // get all releases from git tag
                    script { RELEASES = sh(returnStdout: true, script: 'git tag') }

                    // select release you want to build
                    timeout(60) {  // timeout waiting for input after 60 minutes
                        script {
                            getRelease = input id: 'release', message: 'Please select your release.', ok: 'Proceed?', parameters: [choice(choices: "${RELEASES}"+"master", description: 'Select a release to deploy.', name: 'RELEASE')], submitter: 'jenkins', submitterParameter: 'jenkins'
                            RELEASE=getRelease['RELEASE']
                            BRANCH = RELEASE
                             if (RELEASE == "") {
                                 RELEASE = 'master'
                                 BRANCH = 'origin/master'
                             }
                        }
                    }
                }
            }
        }
        stage('Select environment') {
            steps {
                dir("auto-deploy/ansible/include") {
                    // get all environments: shamu-hrs-eastbay-prod.yml -> shamu-hrs-eastbay-prod
                    script { ENVIRONMENTS = sh(returnStdout: true, script: '''ls | sed 's/\\.[^.]*$//' ''') }

                    // select environment you want to deploy
                    timeout(60) {  // timeout waiting for input after 60 minutes
                        script {
                            getEnvironment = input id: 'environment', message: 'Please select your environment.', ok: 'Proceed?', parameters: [choice(choices: ENVIRONMENTS, description: 'Select a environment to deploy.', name: 'ENVIRONMENT')], submitter: 'jenkins', submitterParameter: 'jenkins'
                            ENV=getEnvironment['ENVIRONMENT']
                        }
                    }
                }
            }
        }
        stage('Create environment related config files') {
            steps {
                dir(path: "${HRS_WORKSPACE}") {
                    script { env = sh(returnStdout: true, script: "echo ${getEnvironment['ENVIRONMENT']} | sed 's/^.*-//'") }
                    script { stack_prefix = sh(returnStdout: true, script: """ echo ${getEnvironment['ENVIRONMENT']} | sed 's/-[^-]*\$//' """)}
                    sh '''
                        touch password
                        echo $ansiblePassword > password
                      '''
                    sh "sudo ansible-playbook --vault-password-file password -e 'stack_prefix=${stack_prefix} env=${env} workspace=${HRS_WORKSPACE} user=$USER jenkins_home=${ROOT_DIR}' auto-deploy/ansible/build-shamu-hrs.yml --tags config-builder"
              }
            }
        }
        stage('parallel build') {
            parallel {
                stage('Shamu-hrs-company-build') {
                    steps {
                        dir('shamu-hrs-company-service') {
                            sh "git checkout ${REF} && CI/build -e ${ENV} -r ${RELEASE}"
                        }
                    }
                }
                stage('Shamu-hrs-gateway-build') {
                    steps {
                        dir('shamu-hrs-gateway') {
                            sh "git checkout ${REF} && CI/build -e ${ENV} -r ${RELEASE}"
                        }
                    }
                }
                stage('Shamu-hrs-document-build') {
                    steps {
                        dir('shamu-hrs-document-service') {
                            sh "git checkout ${REF} && CI/build -e ${ENV} -r ${RELEASE}"
                        }
                    }
                }
                stage('Shamu-hrs-logging-deploy') {
                     when {
                       expression { return params.ENV == "staging" || params.ENV == "prod" }
                     }
                     steps {
                         dir('shamu-hrs-logging-service') {
                             sh "git checkout ${REF} && CI/build -e ${ENV} -r ${RELEASE}"
                         }
                     }
                 }
                stage('Shamu-hrs-search-build') {
                    steps {
                        dir('shamu-hrs-search-service') {
                            sh "git checkout ${REF} && CI/build -e ${ENV} -r ${RELEASE}"
                        }
                    }
                }
                stage('Shamu-hrs-web-build') {
                    steps {
                        dir('shamu-hrs-web') {
                            sh "git checkout ${REF} && CI/build -e ${ENV} -r ${RELEASE}"
                        }
                    }
                }
            }
        }
   }
}
