def getRelease
def getEnvironment

pipeline {
    agent any
    environment {
        HRS_WORKSPACE = "${JENKINS_HOME}/workspace"
        ENV=''
        RELEASE=''
    }

    stages {
        stage('Select release') {
            steps {
                dir(path: "${HRS_WORKSPACE}/shamu-hrs-company-service") {
                    // get all releases from git tag
                    script { RELEASES = sh(returnStdout: true, script: 'git tag') }

                    // select release you want to build
                    timeout(60) {  // timeout waiting for input after 60 minutes
                        script {
                            getRelease = input id: 'release', message: 'Please select your release.', ok: 'Proceed?', parameters: [choice(choices: "${RELEASES}"+"master", description: 'Select a release to deploy.', name: 'RELEASE')], submitter: 'jenkins', submitterParameter: 'jenkins'
                            RELEASE=getRelease['RELEASE']
                        }
                    }
                }
            }
        }
        stage('Select environment') {
            steps {
                dir(path: "${HRS_WORKSPACE}/shamu-hrs/auto-deploy/ansible/include") {
                    // get all environments: shamu-hrs-eastbay-prod.yml -> shamu-hrs-eastbay-prod
                    script { ENVIRONMENTS = sh(returnStdout: true, script: '''ls | sed 's/\\.[^.]*$//' ''') }

                    // select environment you want to deploy
                    timeout(60) {  // timeout waiting for input after 60 minutes
                        script {
                            getEnvironment = input id: 'environment', message: 'Please select your environment.', ok: 'Proceed?', parameters: [choice(choices: ENVIRONMENTS, description: 'Select a environment to deploy.', name: 'ENVIRONMENT')], submitter: 'jenkins', submitterParameter: 'jenkins'
                            ENV=getEnvironment['ENVIRONMENT']
                        }
                    }
                }
            }
        }
        stage('parallel deploy') {
            parallel {
                stage('Shamu-hrs-company-deploy') {
                    steps {
                        dir(path: "${HRS_WORKSPACE}/shamu-hrs-company-service") {
                            sh "sudo CI/deploy ${ENV} ${RELEASE}"
                        }
                    }
                }
                stage('Shamu-hrs-gateway-deploy') {
                    steps {
                        dir(path: "${HRS_WORKSPACE}/shamu-hrs-gateway") {
                            sh "sudo CI/deploy ${ENV} ${RELEASE}"
                        }
                    }
                }
                stage('Shamu-hrs-document-deploy') {
                    steps {
                        dir(path: "${HRS_WORKSPACE}/shamu-hrs-document-service") {
                            sh "sudo CI/deploy ${ENV} ${RELEASE}"
                        }
                    }
                }
                // stage('Shamu-hrs-logging-deploy') {
                //     when {
                //       expression { return params.ENV == "staging" || params.ENV == "prod" }
                //     }
                //     steps {
                //         dir(path: "${params.HRS_WORKSPACE}/shamu-hrs-logging-service") {
                //             sh "sudo bin/deploy ${params.ENV} ${params.RELEASE}"
                //         }
                //     }
                // }
                stage('Shamu-hrs-search-deploy') {
                    steps {
                        dir(path: "${HRS_WORKSPACE}/shamu-hrs-search-service") {
                            sh "sudo CI/deploy ${ENV} ${RELEASE}"
                        }
                    }
                }
                stage('Shamu-hrs-web-deploy') {
                    steps {
                        dir(path: "${HRS_WORKSPACE}/shamu-hrs-web") {
                            sh "sudo CI/deploy ${ENV} ${RELEASE}"
                        }
                    }
                }
            }
        }
    }
}
